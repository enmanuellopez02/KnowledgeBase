@page "/articles/pending"
@inject ILogger<Pending> _logger
@inject HttpClient _httpClient

<h3>Pending</h3>

<div class="evo-submenu-top">
    <div class="form-group">
        <label class="control-label">Status</label>
        <select class="form-control" value="@status" @onchange="GetArticlesForStatusAsync">
            <option value="In Progress">In Progress</option>
            <option value="Submit for review">Submit for review</option>
            <option value="Resubmit for review">Resubmit for review</option>
        </select>
    </div>
</div>
<TableTemplate Items="articles" LoadFailed="loadFailed" Context="article">
    <TableHeader>
        <th>Title</th>
        <th>Category</th>
        <th>Created at</th>
        <th></th>
    </TableHeader>
    <TableRow>
        <td>@article.Title</td>
        <td>@article.Category?.Name</td>
        <td>@article.CreatedAt.ToShortDateString()</td>
        <td><a href="/articles/pending/details/@article.Id" class="">View details</a></td>
    </TableRow>
</TableTemplate>

@code {
    private List<Article> articles = new();
    private bool loadFailed;
    private string status = "In Progress";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadFailed = false;
            await GetArticlesForStatusAsync(new ChangeEventArgs { Value = status });
        }
        catch (Exception ex)
        {
            loadFailed = true;
            _logger.LogWarning(ex, "Failed to load articles pending");
        }
    }

    protected async Task GetArticlesForStatusAsync(ChangeEventArgs args)
    {
        status = args.Value.ToString();
        articles = await _httpClient.GetFromJsonAsync<List<Article>>($"api/articles/search?status={status}");
    }
}
